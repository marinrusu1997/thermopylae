import qrcode from 'qrcode';
import { createException, ErrorCodes } from '../error';
import { TwoFactorAuthAChannelType } from '../types/enums';
import { TotpBaseTwoFactorAuthStrategy } from './totp-base';
import type { AccountWithTotpSecret, TotpBaseTwoFactorAuthStrategyOptions } from './totp-base';
import type { AuthenticationContext } from '../types/requests';

interface TotpTwoFactorAuthStrategyOptions {
	readonly totp: TotpBaseTwoFactorAuthStrategyOptions;
	readonly serviceName: string;
}

interface RegisterResponse {
	totpSecretQRImageUrl: string;
}

class TotpTwoFactorAuthStrategy<Account extends AccountWithTotpSecret> extends TotpBaseTwoFactorAuthStrategy<Account> {
	private readonly serviceName: string;

	public constructor(options: TotpTwoFactorAuthStrategyOptions) {
		super(options.totp);
		this.serviceName = options.serviceName;
	}

	public get type(): TwoFactorAuthAChannelType {
		return TwoFactorAuthAChannelType.TOTP;
	}

	public async beforeRegister(account: Account, response: RegisterResponse): Promise<void> {
		const totpSecret = this.generateAndSetTotpSecret(account);
		const otpAuth = this.authenticator.keyuri(account.username, this.serviceName, totpSecret);
		response.totpSecretQRImageUrl = await qrcode.toDataURL(otpAuth);
	}

	public async sendToken(): Promise<void> {
		// we do not send any code, because it will be generated by user and sent to us
		return undefined;
	}

	public async isTokenValid(account: Account, authenticationContext: AuthenticationContext): Promise<boolean> {
		if (authenticationContext['2fa-token'] == null) {
			throw createException(ErrorCodes.TWO_FACTOR_AUTH_TOKEN_NOT_PROVIDED, 'Totp token was not provided.');
		}
		return this.authenticator.check(authenticationContext['2fa-token'], this.getTotpSecret(account));
	}
}

export { TotpTwoFactorAuthStrategy, TotpTwoFactorAuthStrategyOptions, RegisterResponse };
